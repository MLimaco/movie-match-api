const { getAllMovies } = require('../services/movieServices');
const { getRandomMovie, getMovieByTitle, getMovieByIdOrName } = require('../services/movieServices');

// FunciÃ³n para obtener todas las pelÃ­culas
function getAllMoviesController(req, res) {
    try {
        getAllMovies((movies) => {
            res.status(200).json(movies); // EnvÃ­a las pelÃ­culas como respuesta JSON
        });
    } catch (error) {
        res.status(500).send('Error al obtener las pelÃ­culas.');
    }
}
// Controlador que filtra las pelÃ­culas del aÃ±o 1990
function getMoviesByYearController(req, res) {
    const year = req.query.year;
    const movies = getAllMovies().filter(movie => movie.year === year);
    res.json(movies);
}

// FunciÃ³n para obtener una pelÃ­cula aleatoria
function getRandomMovieController(req, res) {
    try {
        getRandomMovie((movie) => {
            res.status(200).json(movie);
        });
    } catch (error) {
        res.status(500).send('Error al obtener una pelÃ­cula aleatoria.');
    }
}

// FunciÃ³n para buscar una pelÃ­cula por tÃ­tulo
function getMovieByTitleController(req, res) {
    const movieName = req.params.title;

    try {
        getMovieByTitle(movieName, (movie) => {
            if (movie) {
                res.status(200).json(movie);
            } else {
                res.status(404).send('PelÃ­cula no encontrada.');
            }
        });
    } catch (error) {
        res.status(500).send('Error al buscar la pelÃ­cula.');
    }
}

// FunciÃ³n para buscar una pelÃ­cula por ID o nombre
function getMovieByIdOrNameController(req, res) {
    const idOrName = req.params.idOrName;

    try {
        getMovieByIdOrName(idOrName, (movie) => {
            if (!movie) {
                // Si no se encuentra la pelÃ­cula, devolver error 404
                res.status(404).json({ error: "No se encontraron resultados para la bÃºsqueda." });
            } else {
                res.status(200).json(movie); // Devuelve la pelÃ­cula encontrada
            }
        });
    } catch (error) {
        res.status(500).send('Error al buscar la pelÃ­cula.');
    }
}

const { getMoviesByCriteria } = require('../services/movieServices');

/**
 * Controlador para buscar pelÃ­culas por mÃºltiples criterios (nombre parcial y/o aÃ±o).
 */
function getMoviesByCriteriaController(req, res) {
    const { name, year } = req.query;

    try {
        getMoviesByCriteria({ name, year }, (movies) => {
            if (movies.length === 0) {
                // Si no se encuentran pelÃ­culas, devolver error 404
                res.status(404).json({ error: "No se encontraron resultados para la bÃºsqueda." });
            } else {
                res.status(200).json(movies); // Devuelve las pelÃ­culas encontradas
            }
        });
    } catch (error) {
        res.status(500).send('Error al buscar las pelÃ­culas.');
    }
}

function getMoviesByGenreController(req, res) {
    const { genre } = req.query;

    if (!genre) {
        return res.status(400).json({ error: "El parÃ¡metro 'genre' es obligatorio." });
    }

    try {
        getAllMovies((movies) => {
            if (movies.length === 0) {
                res.status(404).json({ error: "No se encontraron pelÃ­culas para el gÃ©nero solicitado." });
            } else {
                res.status(200).json(movies);
            }
        }, genre);
    } catch (error) {
        res.status(500).json({ error: "Error al filtrar por gÃ©nero." });
    }
}

module.exports = {
    getMoviesByCriteriaController,
    getAllMoviesController,
    getRandomMovieController,
    getMovieByIdOrNameController,
    getMovieByTitleController,
    getMoviesByGenreController, // ðŸ‘ˆ nuevo
};